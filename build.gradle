/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.2/samples
 */
plugins{
    id "org.unbroken-dome.gitversion" version "0.10.0"
}

gitVersion{
    rules {
        //baseVersion = "1.0.0"
        onBranch(~/hotfix\/(.+)/){
            def commits = countCommitsSince branchPoint('master')
            def tag = findLatestTag ~/v?(\d+).(\d+).(\d+)/
            def major = tag.matches[1].toInteger()
            def minor = tag.matches[2].toInteger()
            def patch = tag.matches[3].toInteger() + 1
            def tagPatchBeta = findLatestTag ~/v?$major.$minor.$patch-beta.(\d+)/
            def betaVersion = 1;
            if(tagPatchBeta){
                betaVersion = tag.matches[1].toInteger() + 1
            }
            version.major = major
            version.minor = minor
            version.patch = patch
            version.prereleaseTag = "beta.$betaVersion"
            version.buildMetadata = "$commits"

        }

        onBranch(~/bugfix\/(.+)/){
            def branchRelease = branchPoint(~/release\/(\d+).(\d+).0/)
            def commitsFromDevelop = countCommitsSince branchPoint('develop')
            def commitsFromRelease = countCommitsSince branchRelease
            def major = branchRelease.matches[1].toInteger()
            def minor = branchRelease.matches[2].toInteger()
            def betaVersion = 1;
            def tag = findLatestTag ~/v?$major.$minor.0-beta.(\d+)/
            if(tag){
                betaVersion = tag.matches[1].toInteger() + 1
            }

            version.major = major
            version.minor = minor
            version.patch = 0
            version.prereleaseTag = "beta.$betaVersion"
            version.buildMetadata = "$commitsFromDevelop-${matches[1]}.$commitsFromRelease"
        }

        onBranch(~/release\/(\d+).(\d+).0/){
            def commits = countCommitsSince branchPoint('develop')
            def major = matches[1].toInteger()
            def minor = matches[2].toInteger()
            def betaVersion = 1;
            def tag = findLatestTag ~/v?$major.$minor.0-beta.(\d+)/
            if(tag){
                betaVersion = tag.matches[1].toInteger() + 1
            }

            version.major = major
            version.minor = minor
            version.patch = 0
            version.prereleaseTag = "beta.$betaVersion"
            version.buildMetadata = "$commits"
        }

        onBranch('develop'){
            def lastTag = findLatestTag ~/v?(\d+)\.(\d+).+/, true
            def branch = branchPoint ~/release\/(\d+).(\d+).(\d+)/
            def versionMatchers
            int commits = 0

            if(lastTag && branch){
                if (lastTag.matches[1].toInteger() < branch.matches[1].toInteger()){
                    commits =  countCommitsSince  branch, true
                    versionMatchers = branch.matches
                }
                else {
                    commits = countCommitsSince lastTag, true
                    versionMatchers = lastTag.matches
                }
            }

            if( !versionMatchers && lastTag ){
                commits = countCommitsSince lastTag
                versionMatchers = lastTag.matches
            }

            if(versionMatchers) {
                version.major = versionMatchers[1].toInteger()
                version.minor = versionMatchers[2].toInteger() + 1
                version.patch = 0
            }
            else {
                commits =  countCommitsSince branchPoint('master'), true
            }

            version.prereleaseTag = "alpha.$commits"
        }

        onBranch(~/feature\/(.+)/) {
            def lastTag = findLatestTag ~/v?(\d+)\.(\d+).(\d+)-\D+\.?(\d+)/
            int commitsFromLastTag
            int commitsFromDevelop = countCommitsSince branchPoint('develop'), true

            if(lastTag){
                version.major = lastTag.matches[1].toInteger()
                version.minor = lastTag.matches[2].toInteger()
                version.patch = lastTag.matches[3].toInteger()
                commitsFromLastTag = lastTag.matches[4]
            } else {
                commitsFromLastTag =  countCommitsSince branchPoint('master'), true
            }

            version.prereleaseTag = "${matches[1]}.$commitsFromLastTag"
            version.buildMetadata = "$commitsFromDevelop"
        }
    }
}

task show{
    doLast {
        println gitVersion.determineVersion()
    }
}